left_join(actors) -> joined
library(tidyverse)
pics%>%
mutate(name = Film)%>%
left_join(actors) -> joined
pics%>%
mutate(name = Film) ->joined
?mutate
as_tibble(pics)%>%
mutate(name = Film) ->joined
as_tibble(pics)%>%
mutate(Film = name) ->joined
as_tibble(pics)%>%
mutate(Film = name) %>%
left_join(actors) -> joined
joined
unique(actors$Film)
joined
?left_join
as_tibble(pics)%>%
mutate(Film = name) %>%
left_join(actors, by = Film) -> joined
library(tidyverse)
pics <- read.csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/pictures.csv")
actors <- read.csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/actor-actress.csv")
test <- actors[(pics$name == actors$Film),]
test <- actors[(actors$Film==pics$name ),]
actors$Film
pics$name
levels(actors$Film) = levels(pics$name)
levels(actors$Film)
pics <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/pictures.csv")
actors <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/actor-actress.csv")
test <- actors[(actors$Film == pics$name ),]
levels(actors$Film)
levels(pics$name)
actors$Film
class(actors$Film)
class(pics$name)
test <- actors %>%
filter(Film = pics$name)
test <- actors %>%
filter(Film == pics$name)
?sort
pics <- sort(pics$year)
pics <- sort(pics$name)
pics <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/pictures.csv")
pics <- sort(pics$name)
pics <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/pictures.csv")
picsort <- sort(pics$name)
actorsort <- sort(actors$Film)
test <- actorsort[pics$name == actorsort]
test = vector("character", length(picsort))
for(i in seq_along(pics$name)){
for(j in seq_along(actors$Film))
if(actorsort[j] == picsort[i]){
test[i] <- actorsort[j]
}
}
test
picsort[5]
(actors$Film == "All Quiet on the Western Front")
actors$Film
library(tidyverse)
pics <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/pictures.csv")
actors <- read_csv("/Users/michaelzabawa/Desktop/Data\ Str\ 2421/zabawaFinalProject/actor-actress.csv")
picsort <- sort(pics$name)
actorsort <- sort(actors$Film)
test = vector("character", length(picsort))
for(i in seq_along(pics$name)){
for(j in seq_along(actors$Film))
if(actorsort[j] == picsort[i]){
test[i] <- actorsort[j]
}
}
picsort
actorsort
test
?nsample
??sample
?sample
?runif
?unorder
??permute
Gender <- factor(c("M","M","M","M","M","M","M","M","M","M","M","M","M","M",
"F","F","F","F","F","F",))
Gender <- factor(c("M","M","M","M","M","M","M","M","M","M","M","M","M","M",
"F","F","F","F","F","F"))
forcats::fct_shuffle(Gender)
Gender
Gender <- factor(c("M","M","M","M","M","M","M","M","M","M","M","M","M","M",
"F","F","F","F","F","F"))
Gender <- sample(Gender, 20)
Gender
total_self_sicktime <- runif(20, min = 0, max = 4)
total_overtime_hours <- runif(20, min = 0, max = 20)
Gender <- factor(c("M","M","M","M","M","M","M","M","M","M","M","M","M","M",
"F","F","F","F","F","F"))
Gender <- sample(Gender, 20)
Race <- factor(runif(20, min = 0, max = 3))
summary(Race)
Race <- factor(round(runif(20, min = 0, max = 3)))
summary(Race)
Year <- factor(round(runif(20, min = 1, max = 30)))
summary(Year)
Year <- factor(round(rnorm(20, min = 1, max = 30)))
rnorm
log_regularhrs <- log(total_overtime_hours + 40)
log_regularhrs
exp(log_regularhrs)
total_self_sicktime <- runif(20, min = 0, max = 4)
total_overtime_hours <- runif(20, min = 0, max = 20)
Gender <- factor(c("M","M","M","M","M","M","M","M","M","M","M","M","M","M",
"F","F","F","F","F","F"))
Gender <- sample(Gender, 20)
Race <- factor(round(runif(20, min = 0, max = 3)))
Year <- factor(round(runif(20, min = 1, max = 30)))
log_regularhrs <- log(total_overtime_hours + 40)
Age_Years <- runif(20, min = 21, max = 60)
##(1|ID) ?
Dummy_set <- cbind(total_self_sicktime, total_overtime_hours,
Gender, Race, Year, log_regularhrs, Age_Years,)
tomike <- sample(Dummy_set, 10)
Dummy_set <- cbind(total_self_sicktime, total_overtime_hours,
Gender, Race, Year, log_regularhrs, Age_Years)
tomike <- sample(Dummy_set, 10)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
?glmer.nb
??glmer.nb
Ime4::m1 <- glmer(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
lme4::m1 <- glmer(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
lme4::m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
lme4::m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
library("lme4")
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years
, data = Dummy_set)
ID <- factor(round(runif(20, min = 1, max = 2)))
Dummy_set <- cbind(total_self_sicktime, total_overtime_hours,
Gender, Race, Year, log_regularhrs, Age_Years, ID)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years +(1|ID)
, data = Dummy_set)
m1 <- glmer(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years +(1|ID)
, data = Dummy_set)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years +(1|ID)
, data = Dummy_set)
Dummy_set <- list(total_self_sicktime = total_self_sicktime,
total_overtime_hours = total_overtime_hours,
Gender = Gender, Race = Race,
Year = Year, log_regularhrs = log_regularhrs,
Age_Years = Age_Years, ID = ID)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
offset(log_regularhrs) + Age_Years +(1|ID)
, data = Dummy_set)
(est <- cbind(Estimate = coef(m1), confint(m1)))
summary(m1)
coef(m1)
str(m1)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
Age_Years +(1|ID)
, data = Dummy_set)
warning()
warnings()
set.seed(101)
dd <- expand.grid(f1 = factor(1:3),
f2 = LETTERS[1:2], g=1:9, rep=1:15,
KEEP.OUT.ATTRS=FALSE)
summary(mu <- 5*(-4 + with(dd, as.integer(f1) + 4*as.numeric(f2))))
dd$y <- rnbinom(nrow(dd), mu = mu, size = 0.5)
str(dd)
require("MASS")## and use its glm.nb() - as indeed we have zero random effect:
m.glm <- glm.nb(y ~ f1*f2, data=dd, trace=TRUE)
summary(m.glm)
m.nb <- glmer.nb(y ~ f1*f2 + (1|g), data=dd, verbose=TRUE)
m.nb
getME(m.nb, "glmer.nb.theta")
LL <- logLik(m.nb)
stopifnot(attr(LL,"df")==attr(logLik(m.glm),"df")+1)
plot(m.nb, resid(.) ~ g)# works, as long as data 'dd' is found
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
Age_Years +(1|ID)
, data = Dummy_set, verbose = TRUE)
m1
plot(m1, resid(.) ~ g)
plot(m1, resid(.) ~ ID)
ID <- numeric(round(runif(20, min = 1, max = 2)))
ID <- round(runif(20, min = 1, max = 2))
Dummy_set <- list(total_self_sicktime = total_self_sicktime,
total_overtime_hours = total_overtime_hours,
Gender = Gender, Race = Race,
Year = Year, log_regularhrs = log_regularhrs,
Age_Years = Age_Years, ID = ID)
m1 <- glmer.nb(formula = total_self_sicktime ~  total_overtime_hours +
Gender + factor(Race) + factor(Year) +
Age_Years +(1|ID)
, data = Dummy_set, verbose = TRUE)
plot(m1, resid(.) ~ ID)
tomike <- sample(Dummy_set, 10)
Dummy_set
Dummy_set1 <- as.data.frame(Dummy_set)
tomike <- sample(Dummy_set1, 10)
Dummy_set1
lm(log_regularhrs~ total_overtime_hours, data = Dummy_set)
lmod<- lm(log_regularhrs~ total_overtime_hours, data = Dummy_set)
summary(lmod)
plot(log_regularhrs~ total_overtime_hours, data = Dummy_set)
plot(log_regularhrs~ total_overtime_hours, data = Dummy_set, type = "l")
update()
?model.offset
install.packages("quantmod")
library(quantmod)
getSymbols("QQQ")
head(QQQ)
plot(QQQ)
??duplicate
?glmer
?glmer()
??glmer
?select
??select
??xscale
?facet_wrap
??facet_wrap
install.packages("rggobi")
?rggobi
??rggobi
??anova
?anova
??Chisquare
?log-likelyhood
test <- (8.25, 0, 8.5, 9.5, 0, 9.5, 8.5, 8.75, 8.25, 8.5, 8.25, 9.75, 8.75, 8.75,8.75, 9.75, 9.75, 9)
test <- list(8.25, 0, 8.5, 9.5, 0, 9.5, 8.5, 8.75, 8.25, 8.5, 8.25, 9.75, 8.75, 8.75,8.75, 9.75, 9.75, 9)
test
hist(test)
test <- c(8.25, 0, 8.5, 9.5, 0, 9.5, 8.5, 8.75, 8.25, 8.5, 8.25, 9.75, 8.75, 8.75,8.75, 9.75, 9.75, 9)
test
hist(test)
hist(test, binwidth = .25)
?hist
hist(test, breaks = 10)
hist(test, breaks = 20)
hist(test, breaks = 40)
HW1 <- c(8.25, 0, 8.5, 9.5, 0, 9.5, 8.5, 8.75, 8.25, 8.5, 8.25, 9.75, 8.75, 8.75,8.75, 9.75, 9.75, 9)
HW1 <- c(8.25, 0, 8.5, 9.5, 0, 9.5, 8.5, 8.75, 8.25, 8.5, 8.25, 9.75, 8.75, 8.75,8.75, 9.75, 9.75, 9)
hist(HW1, breaks = 40)
floor(1.0917)
install.packages("R2OpenBUGS")
install.packages(c("R2OpenBUGS", "denstrip"))
install.packages("BRugs")
library(BRugs)
install.packages('R2OpenBUGS',type='source')
setwd("/Users/michaelzabawa/Documents/GitHub/Sorting_algorithms_R/")
load("/Users/michaelzabawa/Documents/GitHub/Sorting_algorthims_R/SelectiontimeData.rda")
ggplot(data = timeData, aes(x = `Number of Elements to Sort`))+
geom_line(aes(y = `Improved Selection Sort`, color = "Improved Selection Sort"))+
geom_line(aes(y = `Selection Sort`, color = "Selection Sort"))+
geom_line(aes(y = `C++ Selection Sort`, color = "C++ Selection Sort"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
library(readr)
library(Rcpp)
library(ggplot2)
setwd("/Users/michaelzabawa/Documents/GitHub/Sorting_algorithms_R/")
ggplot(data = timeData, aes(x = `Number of Elements to Sort`))+
geom_line(aes(y = `Improved Selection Sort`, color = "Improved Selection Sort"))+
geom_line(aes(y = `Selection Sort`, color = "Selection Sort"))+
geom_line(aes(y = `C++ Selection Sort`, color = "C++ Selection Sort"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
bucketSortR <- function(setA = A){
index = 0
B <- rep(0, 1000)
for(i in seq_along(setA)){#fills buckets
B[setA[i]] = B[setA[i]] + 1
}
for(i in seq_along(B)){
if(B[i] > 0){
for(num in seq(B[i])){
setA[index + num] = i
index = index + B[i]
}
}
}
return(setA)
}
A <- sample.int(100, size = 10)
A <- bucketSort(A)
path <-"one-million-randoms.txt"
data <- read.delim(file = path, sep = "\n")
A <- bucketSortR(A)
A
item1 <- system.time(B <- bucketSortR(A))
item1
head(B)
tail(B)
A <- sample.int(1000, size =10000, replace = TRUE)
item1 <- system.time(B <- bucketSortR(A))
A <- sample.int(1000, size =1000000, replace = TRUE)
item1 <- system.time(B <- bucketSortR(A))
A <- sample.int(1000, size =10000, replace = TRUE)
system.time(B <- bucketSortR(A))
A <- sample.int(1000, size =100000, replace = TRUE)
system.time(B <- bucketSortR(A))
A <- sample.int(1000, size =1000000, replace = TRUE)
system.time(B <- bucketSortR(A))
1000000^2
1000000*log(1000000)
log(1000000)
n = c(1,10,100,1000,10000,100000,1000000)
selectionSort = c(0,55,5050,500500,50005000,5000050000,500000500000)
mergeSort = c(0,10,100,1000,10000,100000,1000000)
bucketSort = n
data = rbind(n,selectionSort,mergeSort, bucketSort)
data
data = cbind(n,selectionSort,mergeSort, bucketSort)
data
data = as.data.frame(data)
data
library(ggplot2)
ggplot(data, aes(x = n))+
geom_line(aes(y = selectionSort, color = "Selection Sort"))+
geom_line(aes(y = mergeSort, color = "Merge Sort"))+
geom_line(aes(y = bucketSort, color = "Bucket Sort"))
ggplot(data, aes(x = n))+
geom_line(aes(y = selectionSort, color = "Selection Sort"))
plot = ggplot(data, aes(x = n))
plot = ggplot(data, aes(x = n))
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))
plot + geom_line(aes(y = mergeSort, color = "Merge Sort"))
n = c(1,10,100,1000,10000,100000,500000, 1000000)
selectionSort = c(0,55,5050,500500,50005000,5000050000,125000250000, 500000500000)
mergeSort = n
bucketSort = n
data = cbind(n,selectionSort,mergeSort, bucketSort)
data = as.data.frame(data)
plot = ggplot(data, aes(x = n))
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))
n = c(1, 10, 100, 1000, 10000, 100000, 250000 ,500000, 750000, 1000000)
selectionSort = c(0, 55, 5050, 500500, 50005000, 5000050000, 31250125000,125000250000, 281250375000, 500000500000)
mergeSort = n
bucketSort = n
data = cbind(n,selectionSort,mergeSort, bucketSort)
data = as.data.frame(data)
plot = ggplot(data, aes(x = n))
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))
plot = ggplot(data, aes(x = n))
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))
plot + geom_line(aes(y = selectionSort))+
labs(title = "Selection Sort", y = "Number of Loop Iterations", x = "Size of Array to Sort")
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))+
geom_line(aes(y = mergeSort, color = "Merge Sort"))+
geom_line(aes(y = bucketSort, color = "Bucket Sort"))+
labs(title = "Analysis of Growth", y = "Number of Loop Iterations", x = "Size of Array to Sort")
library(ggplot2)
n = c(1, 10, 100, 1000, 10000, 100000, 250000 ,500000, 750000, 1000000)
selectionSort = c(0, 55, 5050, 500500, 50005000, 5000050000, 31250125000,125000250000, 281250375000, 500000500000)
mergeSort = c(0, 34, 672, 9976, 133616, 1668928, 4487856, 9475712, 14701424,19951424)
bucketSort = n
data = cbind(n,selectionSort,mergeSort, bucketSort)
data = as.data.frame(data)
plot = ggplot(data, aes(x = n))
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))+
geom_line(aes(y = mergeSort, color = "Merge Sort"))+
geom_line(aes(y = bucketSort, color = "Bucket Sort"))+
labs(title = "Analysis of Growth", y = "Number of Loop Iterations", x = "Size of Array to Sort")
plot +geom_line(aes(y = mergeSort, color = "Merge Sort"))+
geom_line(aes(y = bucketSort, color = "Bucket Sort"))+
labs(title = "Analysis of Growth", y = "Number of Loop Iterations", x = "Size of Array to Sort")
labels = labs(title = "Analysis of Growth", y = "Number of Loop Iterations", x = "Size of Array to Sort")
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))+
labels
labels = labs(title = "Analysis of Growth", y = "Number of Loop Iterations", x = "Size of Array to Sort", colour = "Sorts")
plot + geom_line(aes(y = selectionSort, color = "Selection Sort"))+
labels
plot +geom_line(aes(y = mergeSort, color = "Merge Sort"))+
geom_line(aes(y = bucketSort, color = "Bucket Sort"))+
labels
install.packages("JuliaCall")
textShake <- read.delim("/Users/michaelzabawa/Documents/Github/Searching_Program2/wordlist.txt", sep = "\n")
textShake
summary(textShake)
load("/Users/michaelzabawa/Documents/Github/Sorting_Program_1/R/SelectiontimeData.rda")
timeData
names(timeData) <- c("N", "R","Python", "C++")
timeData$julia = c(0.000069,0.000050,0.000814,0.013179,0.048383,
0.183329,0.39476, 0.732856,2.226240,4.450899)
timeData2$Python = c(0.00012699999999910005, 0.0008890000000008058,
0.08205999999999847, 1.4835370000000019, 6.016622999999999,
24.007714999999997,67.132768,112.74782499999999,NA,NA)
timeData$Python = c(0.00012699999999910005, 0.0008890000000008058,
0.08205999999999847, 1.4835370000000019, 6.016622999999999,
24.007714999999997,67.132768,112.74782499999999,NA,NA)
timeData
timeData[11,] <- c(0,0,0,0,0)
timeData[11,] <- c(700000,0,0,0,0)
timeData
C1 <- sample.int(1000, size = 200000, replace = TRUE)
library(Rcpp)
library(ggplot2)
library(reticulate)
library(JuliaCall)
setwd("/Users/michaelzabawa/Documents/GitHub/Sorting_Program_1/")
cppFunction(
'List selectionSortCpp(IntegerVector setA){
int min = 0;
int temp = 0;
int index = 0;
long int loopCount = 0;
long int swapCount = 0;
List values;
for(int i = 0; i < int(setA.size()); i++){
min = std::numeric_limits<int>::max();// is an upper bound for eveything
for(int j = i; j < int(setA.size()); j++){//find minimum
loopCount = loopCount + 1;
if(setA[j] < min){
min = setA[j];
index = j;
swapCount = swapCount + 1;
}//if
}//for
//swap min to setA[i]
if(i != index){
temp = setA[i];
setA[i] = setA[index];
setA[index] = temp;
}//swap if index is not equal to i
}//for
values["setA"] = setA;
values["loopCount"] = loopCount;
values["swapCount"] = swapCount;
return values;
}//function
')
C1 <- sample.int(1000, size = 200000, replace = TRUE)
vec3[1] <- system.time(B3 <- selectionSortCpp(C1))[3]
system.time(B3 <- selectionSortCpp(C1))
timeData
timeData[11,] <- c(200000,NA,NA,66.503,17.699251)
timeData
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`, color = "R"))+
geom_line(aes(y = `Python`, color = "Python"))+
geom_line(aes(y = `C++`, color = "C++"))+
geom_line(aes(y = `julia`, color = "julia"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
C1 <- sample.int(1000, size = 300000, replace = TRUE)
system.time(B3 <- selectionSortCpp(C1))
timeData[12,] <- c(300000, NA, NA, 151.586,42.770428)
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`, color = "R"))+
geom_line(aes(y = `Python`, color = "Python"))+
geom_line(aes(y = `C++`, color = "C++"))+
geom_line(aes(y = `julia`, color = "julia"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
timeData[13,] <- c(1000000, NA, NA, NA,500.462881)
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`, color = "R"))+
geom_line(aes(y = `Python`, color = "Python"))+
geom_line(aes(y = `C++`, color = "C++"))+
geom_line(aes(y = `julia`, color = "julia"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
timeData[13,] <- c(500000, NA, NA, NA,151.586)
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`, color = "R"))+
geom_line(aes(y = `Python`, color = "Python"))+
geom_line(aes(y = `C++`, color = "C++"))+
geom_line(aes(y = `julia`, color = "julia"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`/60, color = "R"))+
geom_line(aes(y = `Python`/60, color = "Python"))+
geom_line(aes(y = `C++`/60, color = "C++"))+
geom_line(aes(y = `julia`/60, color = "julia"))+
labs(y = "Time in Seconds", title = "Selection Sort", colour = "Implementation")
timeData[13,] <- c(500000, NA, NA, NA,125.681995)
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`/60, color = "R"))+
geom_line(aes(y = `Python`/60, color = "Python"))+
geom_line(aes(y = `C++`/60, color = "C++"))+
geom_line(aes(y = `julia`/60, color = "julia"))+
labs(y = "Time in Minutes", title = "Selection Sort", colour = "Implementation")
load("/Users/michaelzabawa/timeData2.rda")
timeData
ggplot(data = timeData, aes(x = `N`))+
geom_line(aes(y = `R`/60, color = "R"))+
geom_line(aes(y = `Python`/60, color = "Python"))+
geom_line(aes(y = `C++`/60, color = "C++"))+
#geom_line(aes(y = `julia`/60, color = "julia"))+
labs(y = "Time in Minutes", title = "Selection Sort", colour = "Implementation")
